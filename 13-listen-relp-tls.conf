#
# Docker RSyslog with RELP module support (https://github.com/gynter/docker-rsyslog-relp)
#
# Load imrelp module and listen for incoming messages over RELP using mTLS and TLSv1.3.
#
# See https://github.com/gynter/rsyslog-docker-compose-example for deployment example using Docker Compose.
#
# This configuration file uses advanced (RainerScript) and basic format.
# See https://www.rsyslog.com/doc/v8-stable/configuration/conf_formats.html#which-format-should-i-use for more
# information. Using obsolete legacy syntax is strongly discouraged!
# See https://www.rsyslog.com/doc/master/rainerscript/ for more information.
#
# If you experience problems, see https://www.rsyslog.com/doc/troubleshoot.html

####################################
####            Rules           ####
####################################

# Receive logs over RELP with TLS.
# https://www.rsyslog.com/doc/v8-stable/configuration/modules/imrelp.html
module(
  load="imrelp"

  # Permits to specify the TLS library used by librelp. All relp protocol operations or actually performed by librelp
  # and not rsyslog itself. This value specified is directly passed down to librelp. Depending on librelp version and
  # build parameters, supported tls libraries differ (or TLS may not be supported at all). In this case rsyslog emits
  # an error message.
  # Usually, the following options should be available: “openssl”, “gnutls”.
  # Note that “gnutls” is the current default for historic reasons. We actually recommend to use “openssl”. It provides
  # better error messages and accepts a wider range of certificate types.
  # If you have problems with the default setting, we recommend to switch to “openssl”.
  tls.tlslib="openssl"
)
input(
  type="imrelp"

  # Starts a RELP server on selected port.
  Port="2514"

  # Sets the max message size (in bytes) that can be received. Messages that are too long are handled as specified in
  # parameter oversizeMode. Note that maxDataSize cannot be smaller than the global parameter maxMessageSize.
  maxDataSize="10k"

  # If set to “on”, the RELP connection will be encrypted by TLS, so that the data is protected against observers.
  # Please note that both the client and the server must have set TLS to either “on” or “off”. Other combinations lead
  # to unpredictable results.
  TLS="on"

  # The controls if the TLS stream should be compressed (zipped). While this increases CPU use, the network bandwidth
  # should be reduced. Note that typical text-based log records usually compress rather well.
  TLS.Compression="on"

  # This setting controls how many bits are used for Diffie-Hellman key generation. If not set, the librelp default is
  # used. For security reasons, at least 1024 bits should be used.
  TLS.dhbits="4096"

  # Peer places access restrictions on this listener. Only peers which have been listed in this parameter may connect.
  # The validation bases on the certificate the remote peer presents.
  # Permitted peer name must be present on client's certificate x509 SAN extension DNS name field. Do not use Common
  # Name for that.
  TLS.PermittedPeer=`echo $RSYSLOG_TLS_PERMITTED_PEER`

  # Sets the mode used for mutual authentication. Supported values are either “fingerprint” or “name”.
  # Fingerprint mode basically is what SSH does. It does not require a full PKI to be present, instead self-signed certs
  # can be used on all peers. Even if a CA certificate is given, the validity of the peer cert is NOT verified against
  # it. Only the certificate fingerprint counts.
  # In “name” mode, certificate validation happens. Here, the matching is done against the certificate’s subjectAltName
  # and, as a fallback, the subject common name. If the certificate contains multiple names, a match on any one of these
  # names is considered good and permits the peer to talk to rsyslog.
  TLS.AuthMode="name"

  # The CA certificate that is being used to verify the client certificates. Has to be configured if TLS.AuthMode is
  # set to “fingerprint” or “name”.
  TLS.CaCert="/etc/pki/rsyslog/ca.pem"

  # The machine certificate that is being used for TLS communication.
  TLS.MyCert="/etc/pki/rsyslog/cert.pem"

  # The machine private key for the configured TLS.MyCert.
  TLS.MyPrivKey="/etc/pki/rsyslog/key.pem"

  # The setting can be used if tls.tlslib is set to “openssl” to pass configuration commands to the openssl libray.
  # OpenSSL Version 1.0.2 or higher is required for this feature. A list of possible commands and their valid values
  # can be found in the documentation: https://www.openssl.org/docs/man1.0.2/man3/SSL_CONF_cmd.html.
  # The setting can be single or multiline, each configuration command is separated by linefeed (n). Command and value
  # are separated by equal sign (=).
  tls.tlscfgcmd="Protocol=ALL,-SSLv2,-SSLv3,-TLSv1,-TLSv1.2
  MinProtocol=TLSv1.3"
)
